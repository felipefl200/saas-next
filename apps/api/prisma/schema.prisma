// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  name      String?
  email     String  @unique
  password  String? @map("password_hash")
  avatarUrl String? @map("avatar_url")

  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  tokens            Token[]
  accounts          Account[]
  invites           Invite[]
  member_on         Member[]
  owns_organization Organization[]
  owns_projects     Project[]

  @@map("users")
}

enum AccountProvider {
  GOOGLE
  FACEBOOK
  GITHUB
}

model Account {
  id                String          @id @default(cuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum TokenType {
  ACCESS
  REFRESH
  PASSWORD_RECOVER
}

model Token {
  id   String    @id @default(cuid())
  type TokenType

  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

enum Role {
  BILLING
  ADMIN
  MEMBER
}

model Invite {
  id    String @id @default(cuid())
  email String
  role  Role

  author User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(cuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("members")
}

model Organization {
  id                        String  @id @default(cuid())
  slug                      String  @unique
  domain                    String? @unique
  shouldAttachUsersByDomain Boolean @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String? @map("avatar_url")

  owner  User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  invites Invite[]
  members Member[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  projects  Project[]

  @@map("organizations")
}

model Project {
  id          String  @id @default(cuid())
  slug        String  @unique
  avatarUrl   String? @map("avatar_url")
  description String?

  owner  User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}
